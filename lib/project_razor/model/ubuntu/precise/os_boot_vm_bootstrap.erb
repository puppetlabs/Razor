#!/bin/bash


# Requires VMs with smbios configured
mission=`dmidecode -t system | grep Product | awk '{ print $NF }'`
hostname $mission
echo $mission > /etc/hostname


# this set of commands should convert the first local (but non-loopback) IP
# address in the /etc/hosts file to an entry that has the fully-qualified
# hostname and local hostname as part of the entry (so that tehse names can
# be resolved properly).  A backup of the original file will be left in place
# in the /etc/hosts- file
cp -p /etc/hosts /etc/hosts-
grep '^127\.0\.0\.1.*' /etc/hosts- > /etc/hosts
grep -v '^127\.0\.0\.1.*' /etc/hosts- | grep '^127\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}.*' | head -1 | sed 's/^\(127\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\)\([[:blank:]]\{1,\}\)\(.*\)$/\1\2'$( hostname ).<%= domainname %>'\2'$( hostname )'/' >> /etc/hosts
grep -v '^127\.0\.0\.1.*' /etc/hosts- | grep '^127\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}.*' | tail -n +2 >> /etc/hosts
grep -v '^127\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}.*' /etc/hosts- >> /etc/hosts
[ "$?" -eq 0 ] && curl <%= callback_url("postinstall", "set_hostname_ok") %> || curl <%= callback_url("postinstall", "set_hostname_fail") %>

##### Bootstrap stuff

if [ $mission = "mirror1" -o $mission = "mirror2"]; then

        mkdir -p /srv/mirror
	echo "/dev/vdb1                                       /srv/mirror            ext4    defaults        0       0" >> /etc/fstab
	mount -a

	cat << EOF > /etc/apt/sources.list
	deb file:///srv/mirror/archive.ubuntu.com precise main restricted
	deb file:///srv/mirror/archive.ubuntu.com precise-updates main restricted
	deb file:///srv/mirror/archive.ubuntu.com precise universe
	deb file:///srv/mirror/archive.ubuntu.com precise-updates universe
	deb file:///srv/mirror/archive.ubuntu.com precise multiverse
	deb file:///srv/mirror/archive.ubuntu.com precise-updates multiverse
	deb file:///srv/mirror/archive.ubuntu.com precise-security main restricted
	deb file:///srv/mirror/archive.ubuntu.com precise-security universe
	deb file:///srv/mirror/archive.ubuntu.com precise-security multiverse
	deb file:///srv/mirror/apt.puppetlabs.com precise main
	deb file:///srv/mirror/apt.puppetlabs.com precise dependencies
EOF
        rm -f /etc/dpkg/dpkg.cfg.d/multiarch

        cat /srv/mirror/gpgkeys/puppetlabs-keyring.gpg | apt-key add -
        apt-get -y update && curl <%= callback_url("postinstall", "sources_fix") %>

        apt-get -y install apache2

	cat << EOF > /etc/apache2/sites-enabled/000-default
<VirtualHost *:80>
	DocumentRoot /srv/mirror

	<Directory /srv/mirror/>
		Options Indexes FollowSymLinks MultiViews
		AllowOverride None
		Order allow,deny
		allow from all
	</Directory>

	ErrorLog ${APACHE_LOG_DIR}/error.log
	LogLevel warn
	CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
EOF

	service apache2 restart

elif [ $mission == "bootstrap1" -o $mission == "bootstrap2"]; then
	echo "TODO";


elif [ $mission == "puppetmaster1" -o $mission == "puppetmaster2"]; then
	mkdir /etc/puppet
	cat << EOF > /etc/puppet/puppet.conf
[main]
logdir = /var/log/puppet
vardir = /var/lib/puppet
ssldir = /var/lib/puppet/ssl
rundir = /var/run/puppet
factpath = $vardir/lib/facter
templatedir = /opt/deploy/templates
manifestdir = /opt/deploy/manifests
modulepath = /opt/deploy/modules

[master]
ssl_client_header = SSL_CLIENT_S_DN
ssl_client_verify_header = SSL_CLIENT_VERIFY
storeconfigs = true
storeconfigs_backend = puppetdb
autosign = true

[agent]
certname = `hostname -f`
server = `hostname -f`
EOF

	cat << EOF > /etc/puppet/fileserver.conf
[secrets]
path /secrets/%H/
allow *.`hostname -d`

[shared-secrets]
path /secrets/shared/
allow *.`hostname -d`

	mkdir /etc/puppetdb/
	cat << EOF > /etc/puppetdb/puppetdb.conf
[main]
server = `hostname -f`
port = 8081
EOF
	puppet apply << EOF
package { 'git':
    ensure => present
}

package { 'puppet':
  ensure => present,
}

file { '/etc/default/puppet':
  path => '/etc/default/puppet',
  content => 'START=yes'
}

service { "puppet":
  name       => "puppet",
  ensure     => running,
  enable     => true,
  hasrestart => true,
  require    => [Package["puppet"], File['/etc/default/puppet']]
}

package { 'puppetmaster':
  ensure => present,
}
package { "ceph-common":
  ensure => installed,
}

package { 'puppetdb':
  ensure => present,
  require => [Service['puppetmaster']],
}

package { 'puppetdb-terminus':
  ensure => present,
  require => [Service['puppetmaster']]
}

service { "puppetmaster":
  name       => "puppetmaster",
  ensure     => running,
  enable     => true,
  hasrestart => true,
  require    => Package["puppetmaster"],
}

service { "puppetdb":
  name       => "puppetdb",
  ensure     => running,
  enable     => true,
  hasrestart => true,
  require    => Package["puppetdb"],
}

  file { '/opt/deploy':
    ensure => "directory"
  }

  file { "/secrets":
      ensure  => "directory",
      owner   => "puppet",
      group   => "puppet",
      mode    => 750,
      require => Package['puppetmaster'],
  }
  file { "/secrets/shared":
      ensure  => "directory",
      owner   => "puppet",
      group   => "puppet",
      mode    => 750,
      require => Package['puppetmaster'],
  }
EOF
	echo "the dirty job is off...."
fi;


### for bootstrap this is tricky. This VM might be the mirror :)
if [ $mission != "mirror1" -o $mission = "mirror2"]; then
	sed -i 's_<%= config.image_svc_host %>:<%= config.image_svc_port %>/razor/image/os/<%= @image_uuid %>_<%= config.mirror_host %>:%<%= config.mirror_port %>/archive.ubuntu.com/ubuntu_g' /etc/apt/sources.list && curl <%= callback_url("postinstall", "sources_fix") %>
fi

apt-get -y update
[ "$?" -eq 0 ] && curl <%= callback_url("postinstall", "apt_update_ok") %> || curl <%= callback_url("postinstall", "apt_update_fail") %>

apt-get -y upgrade
[ "$?" -eq 0 ] && curl <%= callback_url("postinstall", "apt_upgrade_ok") %> || curl <%= callback_url("postinstall", "apt_upgrade_fail") %>

apt-get -y install ruby rubygems facter openssh-server
[ "$?" -eq 0 ] && curl <%= callback_url("postinstall", "apt_install_ok") %> || curl <%= callback_url("postinstall", "apt_install_fail") %>


#####

# Get current IP
node_ip=`facter ipaddress`
# Send IP up
curl <%= callback_url("postinstall", "send_ips") %>/$node_ip
# get final script
curl <%= callback_url("postinstall", "boot") %> | sh
# Send final state
curl <%= callback_url("postinstall", "final") %> &


####

function install_puppet() {
    # FIXME: This is DTAG specific. Introduce a hook for this.
    wget -O- http://mirror1/gpgkeys/apt_puppetlabs.gpg | apt-key add -
    cat >/etc/apt/sources.list.d/puppetlabs.list <<EOFPUPPETLABSLIST
deb [arch=amd64] http://mirror1/apt.puppetlabs.com/ precise main dependencies
EOFPUPPETLABSLIST

    apt-get update || true;
    apt-get -y install puppet puppet-common
}

function configure_puppet() {
    mkdir -p /etc/puppet
    cat >/etc/puppet/puppet.conf <<EOFPUPPETCONF
[main]
logdir = /var/log/puppet
rundir = /var/run/puppet
vardir = /var/lib/puppet
ssldir = /var/lib/puppet/ssl
pluginsync = true
report = true
ca_server = puppetmaster1.<%= domainname %>
server = puppetmaster1.<%= domainname %>
EOFPUPPETCONF

    if [ -f /etc/default/puppet ]; then
        cat > /etc/default/puppet <<EOFPUPPETDEFAULT
# Defaults for puppet - sourced by /etc/init.d/puppet

# Start puppet on boot?
START=yes

# Startup options
DAEMON_OPTS=''
EOFPUPPETDEFAULT
    fi
}


if [ $mission = "mirror1" -o $mission = "puppetmaster1" -o $mission = "bootstrap1" -o $mission = "mirror2" -o $mission = "puppetmaster2" -o $mission = "bootstrap2" ]; then

	### cut network
	FINAL_IP=$( host $mission.<%= domainname %> | awk '{ print $NF }' ) 
	GW_IP=$( echo $FINAL_IP | sed 's/\(.*\)\.[0-9]*/\1.1/g' )
	DNS_SERVERS=$( grep nameserver /etc/resolv.conf | awk '{ printf $NF" " }' )

	/etc/init.d/networking stop

	cat << EOF > /etc/network/interfaces


# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet static
	address $FINAL_IP
	netmask 255.255.255.0
	gateway $GW_IP
	# dns-* options are implemented by the resolvconf package, if installed
	dns-nameservers $DNS_SERVERS 
	dns-search <%= domainname %>

### bootstrapping interface
auto eth1
iface eth1 inet manual
EOF

	/etc/init.d/networking start

install_puppet
configure_puppet
service puppet start

fi
