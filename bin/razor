#!/usr/bin/env ruby
#
# EMC Confidential Information, protected under EMC Bilateral Non-Disclosure Agreement.
# Copyright Â© 2012 EMC Corporation, All Rights Reserved
#
# Primary control for ProjectRazor
# Modules are dynamically loaded and accessed through corresponding namespace
# Format will be 'project_razor [module namespace] [module args{}]'
#


$lib_path = File.dirname(File.expand_path(__FILE__)).sub(/\/bin$/,"/lib")
$LOAD_PATH.unshift($lib_path)
require "project_razor"
require "extlib"
require "json"
require "colored"


MODULE_PATH = "#{$lib_path}/project_razor/slices"
SLICE_PREFIX = "ProjectRazor::Slice::"


# Dynamically loads Modules from $RAZOR_HOME/lib/slices
def load_slices
  @obj = ProjectRazor::Object.new
  @version = @obj.get_razor_version
  @logger = @obj.get_logger
  #Dir.glob("#{MODULE_PATH}/*.{rb}") do |file|
  #  require "#{file}"
  #end
  get_slices_loaded
end

# Call the slice
def call_razor_slice
  begin
  if is_slice?
    razor_module = Object.full_const_get(SLICE_PREFIX + @namespace.capitalize).new(@args)
    razor_module.web_command = @web_command
    razor_module.slice_call
  else
    if @web_command
      p JSON.dump({"slice" => "ProjectRazor::Slice", "result" => "InvalidSlice"})
    else
      print_header
      print "\n [#{@namespace.capitalize}] ".red
      print "<-Invalid Slice \n".yellow
    end
  end
  rescue => e
    print_header
    print "\n [#{@namespace.capitalize}] ".red
    print "<-#{e.message} \n".yellow
  end
end

# Load slices
def get_slices_loaded
  temp_hash = {}
  ObjectSpace.each_object do
  |object_class|

    if object_class.to_s.start_with?(SLICE_PREFIX) && object_class.to_s != SLICE_PREFIX
      temp_hash[object_class.to_s] = object_class.to_s.sub(SLICE_PREFIX,"").strip
    end
  end
  @slice_array = {}
  temp_hash.each_value {|x| @slice_array[x] = x}
  @slice_array = @slice_array.each_value.collect {|x| x}
end

# Validate slice
def is_slice?
  @slice_array.each { |slice| return true if @namespace.downcase == slice.downcase }
  false
end


def print_header
  puts "\nProjectRazor - #{@version}".bold.green
  puts "EMC Corporation".green
  puts "\nLoaded slices:"

  x = 0
  @slice_array.each do |slice|
    x += 1
    print "[#{slice.downcase}] ".yellow unless slice.downcase == "base" || slice.downcase == "template"
    if x > 3
      print "\n"
      x = 1
    end
  end
  print "\n"
  puts "\n\tUsage: ".bold
  print "\n\tproject_razor "
  print "[slice name] [command argument] [command argument]...\n\n".red
end


# Detects if running from command line
if $0 == __FILE__
  load_slices
  #cli.get_logger.debug ("ProjectRazor CLI launched")
  @web_command = false

  if ARGV.count > 0
    while ARGV[0].start_with?("-")
      switch = ARGV.shift
      case switch
        when "-w"
          @web_command = true
      end
    end

    @namespace = ARGV.shift
    @args = ARGV

    call_razor_slice
  else
    unless @web_command
      print_header
    end
  end
end


