#!/usr/bin/env ruby
#
# CLI Control for ProjectRazor
# Format will be 'project_razor [module namespace] [module args{}]'
#

# We first add our Lib path to the load path. This is for non-gem ease of use
lib_path = File.dirname(File.expand_path(__FILE__)).sub(/\/bin$/,"/lib")
$LOAD_PATH.unshift(lib_path)


require 'rubygems' if RUBY_VERSION < '1.9'
# We require the root lib
require "project_razor"

# We need these for misc operations later
require "extlib"
require "json"
require "colored"
require "optparse"

# We set a constant for our Slice root Namespace. We use this to pull the slice names back out
# from objectspace
SLICE_PREFIX = "ProjectRazor::Slice::"

#
def init
  @obj = ProjectRazor::Object.new
  @version = @obj.get_razor_version
  @logger = @obj.get_logger
  get_slices_loaded
end

# Call the slice
def call_razor_slice
  begin
    if is_slice?
      razor_module = Object.full_const_get(SLICE_PREFIX + @namespace.capitalize).new(@args)
      razor_module.web_command = @web_command
      razor_module.verbose = @verbose
      razor_module.debug = @debug
      razor_module.slice_call
    else
      if @web_command
        puts JSON.dump({"slice" => "ProjectRazor::Slice", "result" => "InvalidSlice", "http_err_code" => 404})
      else
        if @namespace
          print "\n [#{@namespace.capitalize}] ".red
          print "<-Invalid Slice \n".yellow
        end
      end
    end
  rescue => e
    @logger.error "Razor slice error: #{e.message}"
    if @namespace
      print "\n [#{@namespace.capitalize}] ".red
      print "<-#{e.message} \n".yellow
    else
      print "\nMust Enter Slice Name \n".yellow
    end
    raise e if @debug
  end
end

# Load slices
def get_slices_loaded
  temp_hash = {}

  slice_path = File.expand_path(File.join(File.dirname(__FILE__), "..", "lib/project_razor/slice/*.rb"))

  Dir.glob(slice_path) do |f|
    name = File.basename(f,File.extname(f)).capitalize
    temp_hash[SLICE_PREFIX+name] = name unless name == 'Slice'
  end

  @slice_array = {}
  temp_hash.each_value {|x| @slice_array[x] = x}
  @slice_array = @slice_array.each_value.collect {|x| x}
end

# Validate slice
def is_slice?
  @slice_array.each { |slice| return true if @namespace.downcase == slice.downcase } if @namespace
  false
end

def print_loaded_slices
  print "\nLoaded slices:\n\t"
  x = 1
  @slice_array.sort.each do |slice|
    slice_obj = ::Object.full_const_get(SLICE_PREFIX + slice.capitalize).new([])
    unless slice_obj.hidden
      print "[#{slice.downcase}] ".white
      if x > 5
        print "\n\t"
        x = 0
      end
      x += 1
    end
  end
  print "\n"
end

def get_optparse

  OptionParser.new do |opts|
    opts.banner = "\n" + "Razor - #{@version}".bold.green
    opts.separator "Usage: "
    opts.separator "razor [slice name] [command argument] [command argument]...".red
    opts.separator ""
    opts.separator "Switches".yellow

    @options[:verbose] = false
    opts.on( '-v', '--verbose', 'Enables verbose object printing'.yellow ) do
      @options[:verbose] = true
    end

    @options[:debug] = false
    opts.on( '-d', '--debug', 'Enables printing proper Ruby stacktrace'.yellow ) do
      @options[:debug] = true
    end

    @options[:webcommand] = false
    opts.on( '-w', '--webcommand', 'Accepts web commands.'.yellow ) do
      @options[:webcommand] = true
    end

    @options[:nocolor] = false
    opts.on( '-n', '--no-color-out', 'Disables console color. Useful for script wrapping.'.yellow ) do
      @options[:nocolor] = true
    end

    opts.on_tail( '-h', '--help', 'Display this screen'.yellow ) do
      puts opts
      print_loaded_slices
      exit
    end
  end
end

# Initialise some values
init


@options = {}
optparse = get_optparse
begin
  optparse.parse!
rescue OptionParser::InvalidOption => e
  puts e.message
  puts optparse
  exit
end


@web_command = true if @options[:webcommand]
@debug = true if @options[:debug]
@verbose = true if @options[:verbose]

if @options[:nocolor]
  # if this flag is set, override the default behavior of the underlying "colorize" method
  # from the "Colored" module so that it just returns the string that was passed into it
  # (this will have the effect of turning off any color that might be included in any of
  # the output statements involving Strings in Razor)
  module Colored
    extend self
    def colorize(string, options = {})
      string
    end
  end
  String.send(:include, Colored)
  optparse = get_optparse # reload optparse with color disabled
end

if ARGV.empty? && !@web_command
  puts optparse
  print_loaded_slices
end

@namespace = ARGV.shift
@args = ARGV

call_razor_slice
