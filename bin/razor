#!/usr/bin/env ruby
#
# CLI Control for ProjectRazor
# Format will be 'project_razor [module namespace] [module args{}]'
#

# We first add our Lib path to the load path. This is for non-gem ease of use
lib_path = File.dirname(File.expand_path(__FILE__)).sub(/\/bin$/,"/lib")
$LOAD_PATH.unshift(lib_path)


require 'rubygems' if RUBY_VERSION < '1.9'
# We require the root lib
require "project_razor"

# We need these for misc operations later
require "extlib"
require "json"
require "colored"

# We set a constant for our Slice root Namespace. We use this to pull the slice names back out
# from objectspace
SLICE_PREFIX = "ProjectRazor::Slice::"


#
def init
  @obj = ProjectRazor::Object.new
  @version = @obj.get_razor_version
  @logger = @obj.get_logger
  get_slices_loaded
end

# Call the slice
def call_razor_slice
  begin
    if is_slice?
      razor_module = Object.full_const_get(SLICE_PREFIX + @namespace.capitalize).new(@args)
      razor_module.web_command = @web_command
      razor_module.verbose = @verbose
      razor_module.debug = @debug
      razor_module.slice_call
    else
      if @web_command
        puts JSON.dump({"slice" => "ProjectRazor::Slice", "result" => "InvalidSlice", "http_err_code" => 404})
      else
        print_header
        print "\n [#{@namespace.capitalize}] ".red
        print "<-Invalid Slice \n".yellow
      end
    end
  rescue => e
    raise if @debug
    print_header
    if @namespace
      print "\n [#{@namespace.capitalize}] ".red
      print "<-#{e.message} \n".yellow
    end
  end
end

# Load slices
def get_slices_loaded
  temp_hash = {}

  slice_path = File.expand_path(File.join(File.dirname(__FILE__), "..", "lib/project_razor/slice/*.rb"))

  Dir.glob(slice_path) do |f|
    name = File.basename(f,File.extname(f)).capitalize
    temp_hash[SLICE_PREFIX+name] = name unless name == 'Slice'
  end

  @slice_array = {}
  temp_hash.each_value {|x| @slice_array[x] = x}
  @slice_array = @slice_array.each_value.collect {|x| x}
end

# Validate slice
def is_slice?
  @slice_array.each { |slice| return true if @namespace.downcase == slice.downcase }
  false
end


def print_header
  puts "\nRazor - #{@version}".bold.green
  print "\n\tUsage: ".bold
  print "\n\trazor "
  print "[slice name] [command argument] [command argument]...\n".red
  print "\t Switches:\n".yellow
  print "\t\t --debug        : Enables printing proper Ruby stacktrace\n".yellow
  print "\t\t --verbose      : Enables verbose object printing\n".yellow
  print "\t\t --no-color-out : Disables console color. Useful for script wrapping.\n".yellow
  print_loaded_slices
end

def print_loaded_slices
  print "\nLoaded slices:\n\t"
  x = 1
  @slice_array.sort.each do |slice|
    slice_obj = ::Object.full_const_get(SLICE_PREFIX + slice.capitalize).new([])
    unless slice_obj.hidden
      print "[#{slice.downcase}] ".white
      if x > 5
        print "\n\t"
        x = 0
      end
      x += 1
    end
  end
  print "\n"
end


# First check to see if we have executed from command line
if $0 == __FILE__

  # Initialize a few things
  init


  @web_command = false

  if ARGV.count > 0
    while ARGV[0] && ARGV[0].start_with?("-")
      switch = ARGV.shift
      case switch
        when "--web-command", "-w"
          @web_command = true
        when "--debug", "-d"
          @debug = true
        when "--verbose", "-v"
          @verbose = true
        when "--no-color-out","-nc"
          # if this flag is set, override the default behavior of the underlying "colorize" method
          # from the "Colored" module so that it just returns the string that was passed into it
          # (this will have the effect of turning off any color that might be included in any of
          # the output statements involving Strings in Razor)
          module Colored
            extend self
            def colorize(string, options = {})
              string
            end
          end
          String.send(:include, Colored)
        else
          #
      end
    end

    @namespace = ARGV.shift
    @args = ARGV

    call_razor_slice
  else
    unless @web_command
      print_header
    end
  end
end


